/**
 * 
 * @param {문제 설명
1번 역부터 n번 역 사이를 운행하는 기차들이 있습니다. 모든 기차는 각각 수용 인원이 정해져 있고, s번 역부터, s + 1번 역 s + 2번 역, … e번 역까지 운행합니다. 모든 기차가 한 번만 운행한다고 했을 때, 당신은 최대한 많은 손님이 기차를 이용할 수 있도록 예약을 받으려 합니다.

손님들의 예약 요청에는 승차하는 역 번호와, 하차하는 역 번호가 있습니다. 손님의 요청처럼 곧바로 이동할 수 있는 기차가 없거나, 이용하려는 기차의 수용 인원을 초과할 경우 환승 시스템을 이용할 수 있습니다. 모든 기차는 같은 역에 방문하는 시간이 같다고 가정합니다. 즉, 동일한 역을 지나는 기차끼리 환승이 가능합니다. 환승하는 횟수의 제한은 없습니다.
기차의 최대 수용 인원수를 넘지 않도록, 최대한 많은 손님의 예약을 받으려 합니다.

역의 개수 n=5일 때, 다음과 같은 기차와 예약 요청이 있다고 가정해보겠습니다.

기차 번호	출발 역	도착 역	수용 인원
1번 기차	1번 역	5번 역	2명
2번 기차	2번 역	3번 역	1명
손님 번호	승차 역	하차 역
1번 손님	1번 역	5번 역
2번 손님	1번 역	3번 역
3번 손님	2번 역	5번 역
4번 손님	2번 역	4번 역
5번 손님	2번 역	4번 역
6번 손님	3번 역	5번 역
7번 손님	4번 역	5번 역
2,4,5,7번 손님 4명의 예약을 받을 수 있습니다. 이보다 더 많은 예약을 받을 수는 없습니다.
4,5,7번 손님에게 곧바로 갈 수 있는 1번 기차표를 끊어주고, 2번 손님에게 1번 기차를 타고 가다가 2번 역에서 2번 기차로 환승하는 표를 끊어줍니다. 기차가 운행되는 시나리오는 다음과 같습니다.

1번 역에서 2번 손님이 1번 기차에 탑승합니다. 1번 기차에 한 명이 타고 있습니다.
2번 역에서 2번 손님은 2번 기차로 환승합니다. 4,5번 손님이 1번 기차에 탑승합니다. 1번 기차에 두 명, 2번 기차에 한 명이 타고 있습니다.
3번 역에서 2번 손님이 내립니다. 1번 기차에 두 명이 타고 있습니다.
4번 역에서 4,5번 손님이 내리고, 7번 손님이 1번 기차에 탑승합니다. 1번 기차에 한 명이 타고 있습니다.
5번 역에서 7번 손님이 내리고, 기차의 운행이 끝납니다.
아래의 표는 위의 시나리오대로 각 기차에 타고 있는 손님들의 번호를 나타내었습니다.

현재 역	1번 역	2번 역	3번 역	4번 역	5번 역
1번 기차	2	4, 5	4, 5	7	
2번 기차		2			
기차역의 개수를 의미하는 정수 n, 기차의 정보를 담은 2차원 정수 배열 trains, 기차 예매 정보를 담은 2차원 정수 배열 bookings가 매개변수로 주어집니다. 최대 예약 수를 return 하도록 solution 함수를 완성해 주세요.

제한사항
3 ≤ n ≤ 500
1 ≤ trains의 길이 ≤ 10,000
trains의 원소는 [s,e,k] 형태입니다. s번 역부터 e 번 역까지 운행하고, 최대 수용 인원이 k인 기차를 의미합니다.
1 ≤ s < e ≤ n
1 ≤ k ≤ 1000
1 ≤ bookings의 길이 ≤ 50,000
bookings의 원소는 [a,b] 형태입니다. a번 역에서 승차하여 b번 역에서 하차하는 예약을 의미합니다.
1 ≤ a < b ≤ n
입출력 예
n	trains	bookings	result
5	[[1,5,2],[2,3,1]]	[[1,5],[1,3],[2,5],[2,4],[2,4],[3,5],[4,5]]	4
7	[[1,3,3],[4,7,3]]	[[1,3],[2,5],[3,7],[4,7],[5,6],[6,7],[5,7]]	5
입출력 예 설명
입출력 예 #1

문제 예시와 동일합니다.
입출력 예 #2

1,4,5,6,7번 손님의 예약을 받았을 때 최대 예약 수 5명입니다} n 
 * @param {*} trains 
 * @param {*} bookings 
 * @returns 
 */


function solution(n, trains, bookings) {
  var answer = -1;

  const table = new Array(n).fill(null).map((o) => new Array(trains.length).fill(null).map((_) => new Array()));
  const cases = [];

  for (let i = 1; i <= n; i += 1) {
    // 현재 기차역 = i
    for (let j = 0; j < trains.length; i += 1) {
      // 열차 수
      const [start, end, capacity] = trains[j];
      if (start === i) {
        
      }
    }
  }

  return answer;
}

/**
 * unsolved
 */
